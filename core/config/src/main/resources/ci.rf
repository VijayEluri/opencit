<?xml version="1.0" encoding="UTF-8"?> 
<process xmlns="http://drools.org/drools-5.0/process"
         xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
         xs:schemaLocation="http://drools.org/drools-5.0/process drools-processes-5.0.xsd"
         type="RuleFlow" name="ci" id="ci" package-name="org.openengsb" >

  <header>
    <variables>
      <variable name="buildEndEvent" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="org.openengsb.core.api.Event" />
      </variable>
      <variable name="reportId" >
        <type name="org.drools.process.core.datatype.impl.type.StringDataType" />
      </variable>
      <variable name="processId" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="Long" />
      </variable>
      <variable name="sourcePath" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="OpenEngSBFileModel" />
      </variable>
      <variable name="processSuccess" >
        <type name="org.drools.process.core.datatype.impl.type.BooleanDataType" />
        <value>false</value>
      </variable>
      <variable name="buildStartEvent" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="org.openengsb.core.api.Event" />
      </variable>
      <variable name="testEndEvent" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="org.openengsb.core.api.Event" />
      </variable>
      <variable name="deployEndEvent" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="org.openengsb.core.api.Event" />
      </variable>
      <variable name="buildId" >
        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="java.util.UUID" />
      </variable>
    </variables>
  </header>

  <nodes>
    <start id="1" name="Start" x="75" y="16" width="116" height="64" />
    <end id="6" name="End" x="146" y="1420" width="80" height="40" />
    <eventNode id="143" name="FlowStarted" x="223" y="16" width="116" height="64" >
      <eventFilters>
        <eventFilter type="eventType" eventType="FlowStartedEvent" />
      </eventFilters>
    </eventNode>
    <join id="142" name="Join" x="167" y="112" width="80" height="40" type="1" />
    <actionNode id="129" name="Send Report" x="123" y="1260" width="126" height="48" >
        <action type="expression" dialect="java" >Project project = projectManager.getCurrentContextProject();
String reportName = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss:SSS").format(new Date());
Report r = report.generateReport(reportId, project.getId(), reportName);
Notification n = projectManager.createNotification();
String result;
Boolean success = (Boolean) kcontext.getVariable("processSuccess");
if(success == Boolean.TRUE){
	result = "SUCCESS";
	projectManager.updateCurrentContextProjectState(State.OK);
} else {
	result = "FAILURE";
	projectManager.updateCurrentContextProjectState(State.FAILURE);
}
n.setSubject("CIT workflow report - "+result);
String message = "OpenCIT finished executing CI and T workflow with result: "+ result +".\n\n";
List parts = r.getParts();
int maxLines = 200;
for(int i = 0; i &lt; parts.size(); i++) {
  ReportPart part = (ReportPart) parts.get(i);
  message = message + "Report Part: " + part.getPartName() + "\n";
  String partContent = new String(part.getContent());
  String[] split = partContent.split("\n");
  partContent = split.length &gt; maxLines ? "[...]\n" : "";
  partContent += StringUtils.join(split, "\n", Math.max(0,split.length - maxLines), split.length - 1);
  message = message + partContent + "\n\n";
}
n.setMessage(message);
n.setRecipient(project.getNotificationRecipient());
try {
    notification.notify(n);
} catch (Exception e) {
    Log log = LogFactory.getLog("CI&amp;T workflow");
    log.error("Error when sending notification:\n", e);
}</action>
    </actionNode>
    <actionNode id="15" name="startFlow" x="128" y="184" width="159" height="64" >
        <action type="expression" dialect="java" >Long processIdValue = kcontext.getProcessInstance().getId();
kcontext.setVariable("processId", processIdValue);
String reportIdValue = report.collectData();
kcontext.setVariable("reportId", reportIdValue);</action>
    </actionNode>
    <split id="153" name="Gateway" x="104" y="842" width="49" height="49" type="2" >
      <constraints>
        <constraint toNodeId="154" toType="DROOLS_DEFAULT" name="deploySuccess" priority="1" type="code" dialect="java" >return deployEndEvent instanceof DeploySuccessEvent;</constraint>
        <constraint toNodeId="20" toType="DROOLS_DEFAULT" name="deployFail" priority="2" type="rule" dialect="mvel" >eval(true)</constraint>
      </constraints>
    </split>
    <actionNode id="154" name="setStateToSuccess" x="16" y="923" width="123" height="64" >
        <action type="expression" dialect="java" >kcontext.setVariable("processSuccess", true);</action>
    </actionNode>
    <subProcess id="155" name="runDeploy" x="50" y="762" width="110" height="48" processId="runDeploy" >
      <mapping type="in" from="processId" to="processId" />
      <mapping type="in" from="testEndEvent" to="testEndEvent" />
      <mapping type="out" from="deployEndEvent" to="deployEndEvent" />
    </subProcess>
    <actionNode id="156" name="reportBuildReason" x="135" y="280" width="144" height="48" >
        <action type="expression" dialect="java" >BuildReason reason = (BuildReason) kcontext.getVariable("buildReason");
String reportIdvalue = (String) kcontext.getVariable("reportId");

SimpleReportPart part = new SimpleReportPart("Build Reason", "text/plain", reason.getDescription().getBytes());
report.addReportPart(reportIdvalue, part);</action>
    </actionNode>
    <actionNode id="157" name="storeBuild" x="33" y="1019" width="106" height="48" >
        <action type="expression" dialect="java" >BuildReason reason = (BuildReason) kcontext.getVariable("buildReason");
Project project = projectManager.getCurrentContextProject();
buildId = projectManager.storeBuild(project, reason);</action>
    </actionNode>
    <join id="20" name="jointoSendReport" x="125" y="1179" width="123" height="49" type="2" />
    <actionNode id="158" name="announceUpdate" x="59" y="1099" width="80" height="48" >
        <action type="expression" dialect="java" >Project project = projectManager.getCurrentContextProject();
String location = ((DeploySuccessEvent) deployEndEvent).getArtifactLocation();
projectManager.sendUpdateNotification(project, buildId, location);</action>
    </actionNode>
    <actionNode id="146" name="Directory Delete Hack" x="146" y="1340" width="80" height="48" >
        <action type="expression" dialect="java" >OpenEngSBFileModel m = (OpenEngSBFileModel) kcontext.getVariable("sourcePath");
File f = m != null ? m.getFile() : null;
if (f != null) {
    FileUtils.deleteDirectory(f);
}</action>
    </actionNode>
    <subProcess id="147" name="runTests" x="71" y="601" width="110" height="48" processId="runTests" >
      <mapping type="in" from="processId" to="processId" />
      <mapping type="in" from="buildEndEvent" to="buildEndEvent" />
      <mapping type="out" from="testEndEvent" to="testEndEvent" />
    </subProcess>
    <split id="148" name="Gateway" x="127" y="681" width="49" height="49" type="2" >
      <constraints>
        <constraint toNodeId="155" toType="DROOLS_DEFAULT" name="testSuccess" priority="1" type="code" dialect="java" >return testEndEvent instanceof TestSuccessEvent;</constraint>
        <constraint toNodeId="20" toType="DROOLS_DEFAULT" name="testFail" priority="2" type="rule" dialect="java" >eval(true)</constraint>
      </constraints>
    </split>
    <subProcess id="149" name="runBuild" x="152" y="440" width="110" height="48" processId="runBuild" >
      <mapping type="in" from="processId" to="processId" />
      <mapping type="in" from="sourcePath" to="sourcePath" />
      <mapping type="out" from="buildEndEvent" to="buildEndEvent" />
    </subProcess>
    <split id="150" name="Gateway" x="183" y="520" width="49" height="49" type="2" >
      <constraints>
        <constraint toNodeId="147" toType="DROOLS_DEFAULT" name="buildSuccess" priority="1" type="code" dialect="java" >return buildEndEvent instanceof BuildSuccessEvent;</constraint>
        <constraint toNodeId="20" toType="DROOLS_DEFAULT" name="buildFail" priority="2" type="rule" dialect="mvel" >eval(true)</constraint>
      </constraints>
    </split>
    <actionNode id="151" name="checkoutFiles" x="139" y="360" width="136" height="48" >
        <action type="expression" dialect="java" >OpenEngSBFileModel m = scm.export();
kcontext.setVariable("sourcePath", m);</action>
    </actionNode>
  </nodes>

  <connections>
    <connection from="146" to="6" />
    <connection from="1" to="142" />
    <connection from="143" to="142" />
    <connection from="20" to="129" />
    <connection from="142" to="15" />
    <connection from="155" to="153" />
    <connection from="153" to="154" />
    <connection from="148" to="155" />
    <connection from="15" to="156" />
    <connection from="154" to="157" />
    <connection from="150" to="20" bendpoints="[408,758]" />
    <connection from="148" to="20" bendpoints="[242,829]" />
    <connection from="153" to="20" />
    <connection from="158" to="20" />
    <connection from="157" to="158" />
    <connection from="129" to="146" />
    <connection from="150" to="147" />
    <connection from="147" to="148" />
    <connection from="151" to="149" />
    <connection from="149" to="150" />
    <connection from="156" to="151" />
  </connections>

</process>